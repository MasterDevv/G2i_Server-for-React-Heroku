{"version":3,"sources":["components/layout/Header.tsx","pages/Home/index.tsx","utils/styled.ts","components/data/LoadingOverlay.tsx","components/data/LoadingOverlayInner.tsx","components/data/LoadingSpinner.tsx","store/quiz/types.ts","store/quiz/actions.ts","pages/Quizes/index.tsx","pages/Result/index.tsx","styles/normalize.ts","styles/globals.ts","routes.tsx","store/layout/types.ts","containers/LayoutContainer.tsx","store/layout/actions.ts","styles/colors/brandColors.ts","styles/theme/dark.ts","styles/theme/light.ts","main.tsx","serviceWorker.ts","store/layout/reducer.ts","utils/api.ts","store/quiz/sagas.ts","store/quiz/reducer.ts","store/index.ts","index.tsx","configureStore.ts"],"names":["Header","className","srcSet","title","alt","data-behavior","data-rich-avatar-url","data-avatar-for-person-id","data-controller","src","width","height","dateTime","data-local","Home","to","activeClassName","styled","LoadingOverlay","props","transparentize","theme","colors","background","LoadingOverlayInner","LoadingSpinner","Spinner","CubeMove","keyframes","brand","QuizActionTypes","fetchRequest","action","FETCH_REQUEST","fetchSuccess","data","FETCH_SUCCESS","fetchError","message","FETCH_ERROR","mapDispatchToProps","answerSet","SET_ANSWER","connect","quiz","loading","errors","useState","id","setId","correctId","setCorrectId","fr","setA","useEffect","checkAnswer","useCallback","key","history","push","correct_answer","tmpArray","length","renderData","useMemo","quizData","category","question","Button","color","variant","onClick","e","answer","map","indexOf","fontSize","normalize","css","globals","Routes","data-rich-avatar-suppressed","styles","exact","path","component","Quizes","Result","LayoutActionTypes","LayoutContainer","render","children","useSelector","state","layout","dispatch","useDispatch","setTheme","SET_THEME","layoutActions","brandColors","black","gray75","gray60","gray50","gray40","gray30","gray20","gray10","gray5","white","yellow","red","green","lightTheme","body","headings","borders","lighten","tableOdd","attrs","str","agi","int","fonts","monospace","fontSizes","h1","h2","h3","h4","containerPadding","breakpoints","xs","sm","md","lg","xl","widths","heights","header","darken","Main","store","themes","Boolean","window","location","hostname","match","initialState","reducer","type","payload","async","callApi","method","url","fetch","headers","Accept","JSON","stringify","json","QUIZ_URL","handleFetch","res","call","error","put","results","err","Error","stack","watchFetchRequest","takeEvery","quizSaga","all","fork","undefined","createRootReducer","combineReducers","layoutReducer","quizReducer","router","connectRouter","rootSaga","createBrowserHistory","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","routerMiddleware","run","configureStore","INITIAL_REDUX_STATE","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8248f111.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"message__header\">\r\n      <h1 className=\"message__subject flush--top push_quarter--bottom\">G2i React Web Test - March 2022 Version</h1>\r\n      <div className=\"message__attribution\">\r\n        <div className=\"message__meta\">\r\n          <figure className=\"message__avatar\">\r\n            <img\r\n              srcSet=\"https://bc3-production-assets-cdn.basecamp-static.com/people/BAhpBMZOzgE=--68b8f96f03b42edde452b574fc4bf788b848aafa/avatar-64-x2?v=1 2x, https://bc3-production-assets-cdn.basecamp-static.com/people/BAhpBMZOzgE=--68b8f96f03b42edde452b574fc4bf788b848aafa/avatar-64-x1?v=1 1x, https://bc3-production-assets-cdn.basecamp-static.com/people/BAhpBMZOzgE=--68b8f96f03b42edde452b574fc4bf788b848aafa/avatar-64-x3?v=1 3x, https://bc3-production-assets-cdn.basecamp-static.com/people/BAhpBMZOzgE=--68b8f96f03b42edde452b574fc4bf788b848aafa/avatar-64-x4?v=1 4x\"\r\n              title=\"Adrian Carolli, Core Team Engineer at G2i\"\r\n              alt=\"Adrian Carolli\"\r\n              data-behavior=\"rich_avatar\"\r\n              data-rich-avatar-url=\"/people/30297798/rich_avatar\"\r\n              data-avatar-for-person-id=\"30297798\"\r\n              data-controller=\"lazy-image\"\r\n              className=\"avatar message__avatar-image\"\r\n              src=\"https://bc3-production-assets-cdn.basecamp-static.com/people/BAhpBMZOzgE=--68b8f96f03b42edde452b574fc4bf788b848aafa/avatar-64-x2?v=1\"\r\n              width=\"64\"\r\n              height=\"64\"\r\n            />\r\n          </figure>\r\n          Adrian Carolli\r\n        </div>\r\n        <div className=\"message__meta u-hide-on-template\">\r\n          Last updated&nbsp;\r\n          <time dateTime=\"2021-10-15T14:20:30Z\" data-local=\"time-or-date\">\r\n            September 8, 2022 10:00pm\r\n          </time>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import * as React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"content alignCenter\">\n        <div className=\"pageHeader\">\n          <h1>Welcome to the Trivia Challenge!</h1>\n        </div>\n        <div className=\"pageContent\">\n          <p className=\"f2e\">You will be persented with 10 True or False questions.</p>\n        </div>\n        <div className=\"pageFooter\">\n          <p className=\"f2e\">Can you score 100%?</p>\n          <NavLink to=\"/quiz\" activeClassName=\"is-active\">\n            <h2 className=\"colorBlue\">BEGIN</h2>\n          </NavLink>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import styled, { CreateStyled } from '@emotion/styled'\n\nexport interface Theme {\n  colors: {\n    background: string\n    body: string\n    headings: string\n    borders: string\n    tableOdd: string\n    brand: string\n    black: string\n    white: string\n    attrs: {\n      str: string\n      agi: string\n      int: string\n    }\n  }\n  fonts: {\n    body: string\n    headings: string\n    monospace: string\n  }\n  fontSizes: {\n    h1: string\n    h2: string\n    h3: string\n    h4: string\n  }\n  containerPadding: string\n  breakpoints: {\n    xs: string\n    sm: string\n    md: string\n    lg: string\n    xl: string\n  }\n  widths: {\n    md: string\n    lg: string\n    xl: string\n  }\n  heights: {\n    header: string\n  }\n}\n\nexport default styled as CreateStyled<Theme>\n","import { transparentize } from 'polished'\nimport styled from '../../utils/styled'\n\nconst LoadingOverlay = styled('div')`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 10;\n  background: ${props => transparentize(0.25, props.theme.colors.background)};\n`\n\nexport default LoadingOverlay\n","import styled from '../../utils/styled'\n\nconst LoadingOverlayInner = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 200px;\n`\n\nexport default LoadingOverlayInner\n","import * as React from 'react'\nimport { keyframes } from '@emotion/core'\nimport styled from '../../utils/styled'\n\nconst LoadingSpinner: React.SFC = () => (\n  <Spinner>\n    <div className=\"cube1\" />\n    <div className=\"cube2\" />\n  </Spinner>\n)\n\nexport default LoadingSpinner\n\nconst CubeMove = keyframes`\n  25% {\n    transform: translateX(42px) rotate(-90deg) scale(0.5);\n    -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\n  } 50% {\n    transform: translateX(42px) translateY(42px) rotate(-179deg);\n    -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\n  } 50.1% {\n    transform: translateX(42px) translateY(42px) rotate(-180deg);\n    -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\n  } 75% {\n    transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n    -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\n  } 100% {\n    transform: rotate(-360deg);\n    -webkit-transform: rotate(-360deg);\n  }\n`\n\nconst Spinner = styled('div')`\n  margin: 100px auto;\n  width: 40px;\n  height: 40px;\n  position: relative;\n\n  & .cube1,\n  & .cube2 {\n    background-color: ${props => props.theme.colors.brand};\n    width: 15px;\n    height: 15px;\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    -webkit-animation: ${CubeMove} 1.8s infinite ease-in-out;\n    animation: ${CubeMove} 1.8s infinite ease-in-out;\n  }\n\n  & .cube2 {\n    -webkit-animation-delay: -0.9s;\n    animation-delay: -0.9s;\n  }\n`\n","// This file holds our state type, as well as any other types related to this Redux store.\n// Response object for GET /heroes\nexport interface Quiz extends ApiResponse {\n  id: number\n  category: string\n}\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\nexport type ApiResponse = Record<string, any>\n\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport enum QuizActionTypes {\n  FETCH_REQUEST = '@@quiz/FETCH_REQUEST',\n  SET_ANSWER = '@@quiz/SET_ANSWER',\n  FETCH_SUCCESS = '@@quiz/FETCH_SUCCESS',\n  FETCH_ERROR = '@@quiz/FETCH_ERROR'\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\nexport interface QuizState {\n  readonly loading: boolean\n  readonly data: Quiz[]\n  readonly answer: number[]\n  readonly errors?: string\n}\n","import { action } from 'typesafe-actions'\nimport { QuizActionTypes, Quiz } from './types'\n\nexport const fetchRequest = () => action(QuizActionTypes.FETCH_REQUEST)\nexport const answerSet = (data: number[]) => action(QuizActionTypes.SET_ANSWER, data)\nexport const fetchSuccess = (data: Quiz[]) => action(QuizActionTypes.FETCH_SUCCESS, data)\nexport const fetchError = (message: string) => action(QuizActionTypes.FETCH_ERROR, message)\n","import React, { useState, useEffect, useMemo, useCallback } from 'react'\nimport { connect } from 'react-redux'\nimport Button from '@material-ui/core/Button'\nimport { RouteComponentProps } from 'react-router'\nimport LoadingOverlay from '../../components/data/LoadingOverlay'\nimport LoadingOverlayInner from '../../components/data/LoadingOverlayInner'\nimport LoadingSpinner from '../../components/data/LoadingSpinner'\nimport { ApplicationState } from '../../store'\nimport { Quiz } from '../../store/quiz/types'\nimport { fetchRequest, answerSet } from '../../store/quiz/actions'\n\ninterface PropsFromState {\n  loading: boolean\n  data: Quiz[]\n  errors?: string\n}\n\ninterface PropsFromDispatch {\n  fetchRequest: typeof fetchRequest\n  answerSet: typeof answerSet\n}\n\ntype AllProps = PropsFromState & PropsFromDispatch\ninterface Quizes extends RouteComponentProps, AllProps { }\n\nconst Quizes: React.FC<Quizes> = (props: Quizes) => {\n  const { loading, data } = props\n  const [id, setId] = useState(0)\n  const [correctId, setCorrectId] = useState([-1])\n  const { fetchRequest: fr, answerSet: setA } = props\n  useEffect(() => {\n    fr()\n  }, [fr])\n\n  const checkAnswer = useCallback(\n    (key: string) => {\n      if (id === 9) {\n        setA(correctId)\n        props.history.push('/result')\n      } else if (data[id].correct_answer === 'True') {\n        const tmpArray = correctId\n        tmpArray[tmpArray.length] = id\n        setCorrectId(tmpArray)\n      }\n      setId(id + 1)\n    },\n    [setId, id, correctId, props, data, setA]\n  )\n\n  const renderData = useMemo(() => {\n    if (!loading && data.length > 0) {\n      const quizData = data[id]\n      return (\n        <div className=\"container\">\n          <div className=\"content alignCenter\">\n            <div className=\"pageHeader\">\n              <h1>{quizData.category}</h1>\n            </div>\n            <div className=\"pageContent\">\n              <p className=\"f2e\">{quizData.question}</p>\n            </div>\n            <div className=\"pageFooter\">\n              <div>\n                <Button color=\"primary\" variant=\"contained\" onClick={e => checkAnswer('True')} className=\"btnDefault mr-15\">\n                  Yes\n                </Button>\n                <Button className=\"btnDefault\" onClick={e => checkAnswer('False')} color=\"secondary\" variant=\"contained\">\n                  No\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n  }, [id, data, loading, checkAnswer])\n\n  return (\n    <div>\n      {loading && (\n        <LoadingOverlay>\n          <LoadingOverlayInner>\n            <LoadingSpinner />\n          </LoadingOverlayInner>\n        </LoadingOverlay>\n      )}\n      {renderData}\n    </div>\n  )\n}\n\nconst mapStateToProps = ({ quiz }: ApplicationState) => ({\n  loading: quiz.loading,\n  errors: quiz.errors,\n  data: quiz.data\n})\n\nconst mapDispatchToProps = {\n  fetchRequest,\n  answerSet\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Quizes)\n","import React, { useEffect, useMemo } from 'react'\nimport { connect } from 'react-redux'\nimport Button from '@material-ui/core/Button'\nimport { RouteComponentProps } from 'react-router'\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff'\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\nimport LoadingOverlay from '../../components/data/LoadingOverlay'\nimport LoadingOverlayInner from '../../components/data/LoadingOverlayInner'\nimport LoadingSpinner from '../../components/data/LoadingSpinner'\nimport { ApplicationState } from '../../store'\nimport { Quiz } from '../../store/quiz/types'\nimport { fetchRequest } from '../../store/quiz/actions'\n\ninterface PropsFromState {\n  loading: boolean\n  data: Quiz[]\n  answer: number[]\n  errors?: string\n}\n\ninterface PropsFromDispatch {\n  fetchRequest: typeof fetchRequest\n}\n\ntype AllProps = PropsFromState & PropsFromDispatch\ninterface Result extends RouteComponentProps, AllProps { }\n\nconst Result: React.FC<Result> = (props: Result) => {\n  const { loading, data, answer } = props\n  const { fetchRequest: fr } = props\n  useEffect(() => {\n    if (loading === true) {\n      fr()\n    }\n  }, [loading, fr])\n\n  const renderData = useMemo(() => {\n    if (!loading && data.length > 0) {\n      return (\n        <div className=\"container\">\n          <div className=\"content\">\n            <div className=\"alignCenter\">\n              <h1>You Scored</h1>\n              <h2>{answer.length - 1}/10</h2>\n            </div>\n\n            <div>\n              {data.map((quizData, key) => (\n                <div className=\"item\">\n                  <p className=\"f1e\">\n                    {answer.indexOf(key) >= 0 ? (\n                      <CheckCircleOutlineIcon color=\"primary\" fontSize=\"large\" />\n                    ) : (\n                      <HighlightOffIcon color=\"secondary\" fontSize=\"large\" />\n                    )}\n                    {quizData.question}\n                  </p>\n                </div>\n              ))}\n            </div>\n            <div className=\"alignCenter\">\n              <Button color=\"primary\" variant=\"contained\" className=\"btnDefault\" onClick={() => props.history.push('/quiz')}>\n                Play Again\n              </Button>\n            </div>\n          </div>\n        </div>\n      )\n    }\n  }, [data, loading, answer, props])\n\n  return (\n    <div>\n      {loading ? (\n        <LoadingOverlay>\n          <LoadingOverlayInner>\n            <LoadingSpinner />\n          </LoadingOverlayInner>\n        </LoadingOverlay>\n      ) : (\n        renderData\n      )}\n    </div>\n  )\n}\n\nconst mapStateToProps = ({ quiz }: ApplicationState) => ({\n  loading: quiz.loading,\n  errors: quiz.errors,\n  data: quiz.data,\n  answer: quiz.answer\n})\n\nconst mapDispatchToProps = {\n  fetchRequest\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Result)\n","import { css } from '@emotion/core'\n\nconst normalize = css`\n  /*! modern-normalize | MIT License | https://github.com/sindresorhus/modern-normalize */\n\n  /* Document\n    ========================================================================== */\n\n  /**\n  * Use a better box model (opinionated).\n  */\n\n  html {\n    box-sizing: border-box;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  /**\n  * Use a more readable tab size (opinionated).\n  */\n\n  :root {\n    -moz-tab-size: 4;\n    tab-size: 4;\n  }\n\n  /**\n  * Correct the line height in all browsers.\n  */\n\n  html {\n    line-height: 1.15;\n  }\n\n  /* Sections\n    ========================================================================== */\n\n  /**\n  * Remove the margin in all browsers.\n  */\n\n  body {\n    margin: 0;\n  }\n\n  /**\n  * Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n  */\n\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',\n      'Segoe UI Symbol';\n  }\n\n  /**\n  * Correct the font size and margin on \\`h1\\` elements within \\`section\\` and\n  * \\`article\\` contexts in Chrome, Firefox, and Safari.\n  */\n\n  h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n  }\n\n  /* Grouping content\n    ========================================================================== */\n\n  /**\n  * Add the correct height in Firefox.\n  */\n\n  hr {\n    height: 0;\n  }\n\n  /* Text-level semantics\n    ========================================================================== */\n\n  /**\n  * Add the correct text decoration in Chrome, Edge, and Safari.\n  */\n\n  abbr[title] {\n    text-decoration: underline dotted;\n  }\n\n  /**\n  * Add the correct font weight in Chrome, Edge, and Safari.\n  */\n\n  b,\n  strong {\n    font-weight: bolder;\n  }\n\n  /**\n  * 1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)\n  * 2. Correct the odd \\`em\\` font sizing in all browsers.\n  */\n\n  code,\n  kbd,\n  samp,\n  pre {\n    font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; /* 1 */\n    font-size: 1em; /* 2 */\n  }\n\n  /**\n  * Add the correct font size in all browsers.\n  */\n\n  small {\n    font-size: 80%;\n  }\n\n  /**\n  * Prevent \\`sub\\` and \\`sup\\` elements from affecting the line height in\n  * all browsers.\n  */\n\n  sub,\n  sup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n  }\n\n  sub {\n    bottom: -0.25em;\n  }\n\n  sup {\n    top: -0.5em;\n  }\n\n  /* Forms\n    ========================================================================== */\n\n  /**\n  * 1. Change the font styles in all browsers.\n  * 2. Remove the margin in Firefox and Safari.\n  */\n\n  button,\n  input,\n  optgroup,\n  select,\n  textarea {\n    font-family: inherit; /* 1 */\n    font-size: 100%; /* 1 */\n    line-height: 1.15; /* 1 */\n    margin: 0; /* 2 */\n  }\n\n  /**\n  * Remove the inheritance of text transform in Edge and Firefox.\n  * 1. Remove the inheritance of text transform in Firefox.\n  */\n\n  button,\n  select {\n    /* 1 */\n    text-transform: none;\n  }\n\n  /**\n  * Correct the inability to style clickable types in iOS and Safari.\n  */\n\n  button,\n  [type='button'],\n  [type='reset'],\n  [type='submit'] {\n    -webkit-appearance: button;\n  }\n\n  /**\n  * Remove the inner border and padding in Firefox.\n  */\n\n  button::-moz-focus-inner,\n  [type='button']::-moz-focus-inner,\n  [type='reset']::-moz-focus-inner,\n  [type='submit']::-moz-focus-inner {\n    border-style: none;\n    padding: 0;\n  }\n\n  /**\n  * Restore the focus styles unset by the previous rule.\n  */\n\n  button:-moz-focusring,\n  [type='button']:-moz-focusring,\n  [type='reset']:-moz-focusring,\n  [type='submit']:-moz-focusring {\n    outline: 1px dotted ButtonText;\n  }\n\n  /**\n  * Correct the padding in Firefox.\n  */\n\n  fieldset {\n    padding: 0.35em 0.75em 0.625em;\n  }\n\n  /**\n  * Remove the padding so developers are not caught out when they zero out\n  *    \\`fieldset\\` elements in all browsers.\n  */\n\n  legend {\n    padding: 0;\n  }\n\n  /**\n  * Add the correct vertical alignment in Chrome and Firefox.\n  */\n\n  progress {\n    vertical-align: baseline;\n  }\n\n  /**\n  * Correct the cursor style of increment and decrement buttons in Chrome.\n  */\n\n  [type='number']::-webkit-inner-spin-button,\n  [type='number']::-webkit-outer-spin-button {\n    height: auto;\n  }\n\n  /**\n  * 1. Correct the odd appearance in Chrome and Safari.\n  * 2. Correct the outline style in Safari.\n  */\n\n  [type='search'] {\n    -webkit-appearance: textfield; /* 1 */\n    outline-offset: -2px; /* 2 */\n  }\n\n  /**\n  * Remove the inner padding in Chrome and Safari on macOS.\n  */\n\n  [type='search']::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  /**\n  * 1. Correct the inability to style clickable types in iOS and Safari.\n  * 2. Change font properties to \\`inherit\\` in Safari.\n  */\n\n  ::-webkit-file-upload-button {\n    -webkit-appearance: button; /* 1 */\n    font: inherit; /* 2 */\n  }\n\n  /* Interactive\n    ========================================================================== */\n\n  /*\n  * Add the correct display in Edge and Firefox.\n  */\n\n  details {\n    display: block;\n  }\n\n  /*\n  * Add the correct display in all browsers.\n  */\n\n  summary {\n    display: list-item;\n  }\n`\n\nexport default normalize\n","import { css } from '@emotion/core'\n\nconst globals = css`\n  body {\n    width: 100%;\n    overflow-x: hidden;\n    overflow-y: scroll;\n  }\n\n  a {\n    color: inherit;\n    text-decoration: none;\n\n    &:hover,\n    &:focus {\n      text-decoration: underline;\n    }\n  }\n\n  img {\n    max-width: 100%;\n    position: relative;\n    vertical-align: middle;\n  }\n\n  figure {\n    margin: 2rem 0;\n  }\n\n  figcaption {\n    font-size: 80%;\n  }\n\n  table {\n    width: 100%;\n    font-size: 85%;\n    border-collapse: collapse;\n  }\n`\n\nexport default globals\n","import * as React from 'react'\nimport { Route, BrowserRouter } from 'react-router-dom'\nimport { Global } from '@emotion/core'\nimport Header from './components/layout/Header'\nimport Home from './pages/Home'\nimport Quizes from './pages/Quizes'\nimport Result from './pages/Result'\nimport normalize from './styles/normalize'\nimport globals from './styles/globals'\n\nconst Routes: React.SFC = () => (\n  <div className=\"panel panel--perma\">\n    <article className=\"recordable\" data-rich-avatar-suppressed>\n      <article className=\"document\">\n        <Global styles={normalize} />\n        <Global styles={globals} />\n        <Header />\n        <BrowserRouter>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/quiz\" component={Quizes} />\n          <Route path=\"/result\" component={Result} />\n        </BrowserRouter>\n      </article>\n    </article>\n  </div>\n)\n\nexport default Routes\n","// Example for using discriminated union types.\nexport type ThemeColors = 'light' | 'dark'\n\n// Use enums for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport enum LayoutActionTypes {\n  SET_THEME = '@@layout/SET_THEME'\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface LayoutState {\n  readonly theme: ThemeColors\n}\n","import * as React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ApplicationState } from '../store'\nimport { ThemeColors } from '../store/layout'\nimport * as layoutActions from '../store/layout/actions'\n\n// Redux-specific props.\ninterface LayoutContainerProps {\n  theme: ThemeColors\n  setTheme: (theme: ThemeColors) => void\n}\n\n// Wrapper props for render/children callback.\ninterface LayoutContainerRenderProps {\n  render?: (props: LayoutContainerProps) => React.ReactElement\n  children?: (props: LayoutContainerProps) => React.ReactElement\n}\n\nconst LayoutContainer: React.FC<LayoutContainerRenderProps> = ({ render, children }) => {\n  // We can use Hooks to call in our selector/dispatch functions.\n  const { theme } = useSelector((state: ApplicationState) => state.layout)\n  const dispatch = useDispatch()\n  // Create the `setTheme` handler. We use the `dispatch` we got from `useDispatch()` to create said selector.\n  const setTheme = (color: ThemeColors) => dispatch(layoutActions.setTheme(color))\n  // Create a render/children props wrapper with the above variables set as a callback.\n  if (render) {\n    return render({ theme, setTheme })\n  }\n\n  if (children) {\n    return children({ theme, setTheme })\n  }\n\n  return null\n}\n\nexport default LayoutContainer\n","import { action } from 'typesafe-actions'\n\nimport { LayoutActionTypes, ThemeColors } from './types'\n\n// Here we use the `action` helper function provided by `typesafe-actions`.\n// This library provides really useful helpers for writing Redux actions in a type-safe manner.\n// For more info: https://github.com/piotrwitek/typesafe-actions\n//\n// Remember, you can also pass parameters into an action creator. Make sure to\n// type them properly as well.\n\nexport const setTheme = (theme: ThemeColors) => action(LayoutActionTypes.SET_THEME, theme)\n","const brandColors = {\n  black: '#000000',\n  gray75: '#2e2e2c',\n  gray60: '#666666',\n  gray50: '#7f7f7f',\n  gray40: '#999999',\n  gray30: '#b2b2b2',\n  gray20: '#cccccc',\n  gray10: '#e5e5e5',\n  gray5: '#ebebea',\n  white: '#fefefe',\n  yellow: '#f3df49',\n  red: '#eb5558',\n  green: '#9ee79a'\n}\n\nexport default brandColors\n","import { lighten } from 'polished'\nimport { Theme } from '../../utils/styled'\nimport brandColors from '../colors/brandColors'\n\nconst lightTheme: Theme = {\n  colors: {\n    background: brandColors.gray75,\n    body: brandColors.gray10,\n    headings: brandColors.gray5,\n    black: brandColors.black,\n    white: brandColors.white,\n    borders: lighten(0.05, brandColors.gray75),\n    tableOdd: lighten(0.025, brandColors.gray75),\n    brand: brandColors.red,\n    attrs: {\n      str: '#f44336',\n      agi: '#39d402',\n      int: '#01a9f4'\n    }\n  },\n  fonts: {\n    headings:\n      // eslint-disable-next-line max-len\n      '',\n    body:\n      // eslint-disable-next-line max-len\n      '-apple-system, system-ui, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol',\n    monospace: ''\n  },\n  fontSizes: {\n    h1: '2.441rem',\n    h2: '1.953rem',\n    h3: '1.563rem',\n    h4: '1.25rem'\n  },\n  containerPadding: '1.5rem',\n  breakpoints: {\n    xs: '0px',\n    sm: '576px',\n    md: '768px',\n    lg: '992px',\n    xl: '1200px'\n  },\n  widths: {\n    md: '720px',\n    lg: '960px',\n    xl: '1140px'\n  },\n  heights: {\n    header: '60px'\n  }\n}\n\nexport default lightTheme\n","import { darken } from 'polished'\nimport { Theme } from '../../utils/styled'\nimport brandColors from '../colors/brandColors'\n\nconst lightTheme: Theme = {\n  colors: {\n    background: brandColors.gray5,\n    body: brandColors.gray75,\n    headings: brandColors.black,\n    black: brandColors.black,\n    white: brandColors.white,\n    borders: darken(0.05, brandColors.gray5),\n    tableOdd: darken(0.025, brandColors.gray5),\n    brand: brandColors.red,\n    attrs: {\n      str: '#f44336',\n      agi: '#39d402',\n      int: '#01a9f4'\n    }\n  },\n  fonts: {\n    headings:\n      // eslint-disable-next-line max-len\n      \"'IBM Plex Sans', -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell,  Fira Sans, Droid Sans, Helvetica Neue, Arial, sans-serif\",\n    body:\n      // eslint-disable-next-line max-len\n      '-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, Arial, sans-serif',\n    monospace: \"'IBM Plex Mono', Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace, monospace\"\n  },\n  fontSizes: {\n    h1: '2.441rem',\n    h2: '1.953rem',\n    h3: '1.563rem',\n    h4: '1.25rem'\n  },\n  containerPadding: '1.5rem',\n  breakpoints: {\n    xs: '0px',\n    sm: '576px',\n    md: '768px',\n    lg: '992px',\n    xl: '1200px'\n  },\n  widths: {\n    md: '720px',\n    lg: '960px',\n    xl: '1140px'\n  },\n  heights: {\n    header: '60px'\n  }\n}\n\nexport default lightTheme\n","import * as React from 'react'\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { Store } from 'redux'\nimport { History } from 'history'\nimport { ThemeProvider } from 'emotion-theming'\n\nimport Routes from './routes'\nimport { ApplicationState } from './store'\nimport LayoutContainer from './containers/LayoutContainer'\nimport * as themes from './styles/theme'\nimport './main.css'\n// Any additional component props go here.\ninterface MainProps {\n  store: Store<ApplicationState>\n  history: History\n}\n\n// Create an intersection type of the component props and our Redux props.\nconst Main: React.FC<MainProps> = ({ store, history }) => {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <LayoutContainer>\n          {({ theme }) => (\n            <ThemeProvider theme={themes[theme]}>\n              <Routes />\n            </ThemeProvider>\n          )}\n        </LayoutContainer>\n      </ConnectedRouter>\n    </Provider>\n  )\n}\n\n// Normally you wouldn't need any generics here (since types infer from the passed functions).\n// But since we pass some props from the `index.js` file, we have to include them.\n// For an example of a `connect` function without generics, see `./containers/LayoutContainer`.\nexport default Main\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.toString())\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://goo.gl/SC7cgQ')\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.')\n\n                // Execute callback\n                if (config.onUpdate) {\n                  config.onUpdate(registration)\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.')\n\n                // Execute callback\n                if (config.onSuccess) {\n                  config.onSuccess(registration)\n                }\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type')!.indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { Reducer } from 'redux'\nimport { LayoutState, LayoutActionTypes } from './types'\n\n// Type-safe initialState!\nexport const initialState: LayoutState = {\n  theme: 'light'\n}\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<LayoutState> = (state = initialState, action) => {\n  switch (action.type) {\n    case LayoutActionTypes.SET_THEME: {\n      return { ...state, theme: action.payload }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as layoutReducer }\n","export async function callApi(method: string, url: string, path: string, data?: any) {\n  const res = await fetch(`${url}/api${path}`, {\n    method,\n    headers: {\n      Accept: 'application/json'\n    },\n    body: JSON.stringify(data)\n  })\n  return res.json()\n}\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects'\nimport { QuizActionTypes } from './types'\nimport { fetchError, fetchSuccess } from './actions'\nimport { callApi } from '../../utils/api'\n\nconst QUIZ_URL = 'https://opentdb.com/api.php'\n\nfunction* handleFetch() {\n  try {\n    // To call async functions, use redux-saga's `call()`.\n    const res = yield call(callApi, 'get', QUIZ_URL, '?amount=10&difficulty=hard&type=boolean')\n    if (res.error) {\n      yield put(fetchError(res.error))\n    } else {\n      yield put(fetchSuccess(res.results))\n    }\n  } catch (err) {\n    if (err instanceof Error && err.stack) {\n      yield put(fetchError(err.stack))\n    } else {\n      yield put(fetchError('An unknown error occured.'))\n    }\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchFetchRequest() {\n  yield takeEvery(QuizActionTypes.FETCH_REQUEST, handleFetch)\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction* quizSaga() {\n  yield all([fork(watchFetchRequest)])\n}\n\nexport default quizSaga\n","import { Reducer } from 'redux'\nimport { QuizState, QuizActionTypes } from './types'\n\n// Type-safe initialState!\nexport const initialState: QuizState = {\n  data: [],\n  answer: [],\n  errors: undefined,\n  loading: true\n}\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<QuizState> = (state = initialState, action) => {\n  switch (action.type) {\n    case QuizActionTypes.SET_ANSWER: {\n      return { ...state, loading: false, answer: action.payload }\n    }\n    case QuizActionTypes.FETCH_REQUEST: {\n      return { ...state, loading: true }\n    }\n    case QuizActionTypes.FETCH_SUCCESS: {\n      return { ...state, loading: false, data: action.payload }\n    }\n    case QuizActionTypes.FETCH_ERROR: {\n      return { ...state, loading: false, errors: action.payload }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as quizReducer }\n","import { combineReducers } from 'redux'\nimport { all, fork } from 'redux-saga/effects'\nimport { connectRouter, RouterState } from 'connected-react-router'\nimport { History } from 'history'\nimport { LayoutState, layoutReducer } from './layout'\nimport quizSaga from './quiz/sagas'\nimport { quizReducer } from './quiz/reducer'\nimport { QuizState } from './quiz/types'\n// The top-level state object\nexport interface ApplicationState {\n  layout: LayoutState\n  quiz: QuizState\n  router: RouterState\n}\n\n// Whenever an action is dispatched, Redux will update each top-level application state property\n// using the reducer with the matching name. It's important that the names match exactly, and that\n// the reducer acts on the corresponding ApplicationState property type.\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    layout: layoutReducer,\n    quiz: quizReducer,\n    router: connectRouter(history)\n  })\n\n// Here we use `redux-saga` to trigger actions asynchronously. `redux-saga` uses something called a\n// \"generator function\", which you can read about here:\nexport function* rootSaga() {\n  yield all([fork(quizSaga)])\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport { createBrowserHistory } from 'history'\n\nimport Main from './main'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './configureStore'\n\nimport 'typeface-ibm-plex-sans'\n\n// We use hash history because this example is going to be hosted statically.\n// Normally you would use browser history.\nconst history = createBrowserHistory()\n\nconst initialState = window.INITIAL_REDUX_STATE\nconst store = configureStore(history, initialState)\n\nReactDOM.render(<Main store={store} history={history} />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { Store, createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n// `react-router-redux` is deprecated, so we use `connected-react-router`.\n// This provides a Redux middleware which connects to our `react-router` instance.\nimport { routerMiddleware } from 'connected-react-router'\n// We'll be using Redux Devtools. We can use the `composeWithDevTools()`\n// directive so we can pass our middleware along with it\nimport { composeWithDevTools } from 'redux-devtools-extension'\n// If you use react-router, don't forget to pass in your history type.\nimport { History } from 'history'\n\n// Import the state interface and our combined reducers/sagas.\nimport { ApplicationState, createRootReducer, rootSaga } from './store'\n\nexport default function configureStore(history: History, initialState: ApplicationState): Store<ApplicationState> {\n  // create the composing function for our middlewares\n  const composeEnhancers = composeWithDevTools({})\n  // create the redux-saga middleware\n  const sagaMiddleware = createSagaMiddleware()\n\n  // We'll create our store with the combined reducers/sagas, and the initial Redux state that\n  // we'll be passing from our entry point.\n  const store = createStore(\n    createRootReducer(history),\n    initialState,\n    composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware))\n  )\n\n  // Don't forget to run the root saga, and return the store object.\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n"],"sourceRoot":""}